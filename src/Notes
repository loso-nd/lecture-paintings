!## App.js
- Parent file
- Renders components to the DOM
- Imports
    - painting data file to provide access to other {PaintingList} via props
    - {PaintingList} file where we get access to all of our paintings in order to create a single card for each painting from our data

    - {NavBar} file to render the to the DOM
Function component return
    - {NavBar} passing props in forms of attr [key="value"]
    - {PaintingsList} passing props in forms of attr [key="value"]

!##PaintingList
    ?- Responsiblity: 
    We want to display a painting Card for every painting in our data, By looking at the original painting arr, we already setup our paintings to have been passed down as props. For every item in our painting arr we want to render a painting card. Using map we can iterate thru our arr and return an arr of painting Cards. 

    ?- Imports
        - {PaintingCard} file is where we add the details for what we want to see on the card. Then import it here where each of those items are mapped into its own single card.

    ?function components return
        - We return a single {PaintingCard} and pass the painting.id, & paintings data into it to make them available to set up the structure of how we want the details passed to be displayed no the card. 

!##PaintingCard
        ?- Responsiblity: 
        Setting up the layout for the  details of the paintings. 
        
        
!Overview:
    ?{index.js} Top tier hierachy of all our components which renders the {App}

    ?- {App} 
    imports semantic-ui, paintings data, {paintingsList} and {NavBar} which are both dynamically inserted components. Both components are passed props which allows us to access them via props inside the designated component. Dynamically adding components here are returned to be display to the DOM

        Then...

    ?- {NavBar} 
    A fucntional component now has access to the props passed into it from the {App}. We can access those props, via [ props.key ]. Recall passing props means that we use [key = "value" ]

       Then...         

    ?- {PaintingList} 
    functional compponent, imports {PaintingCard}, executes a map on the PaintingsList arr. This arr is only avaialble bc the paintings data was passed as props into the dynamic component from {App}. For each item in that arr it {PaintingList} will return a single {PaintingCard}. We pass in the following key={painting.id}, painting={painting} as props to be used later inside {PaintingCard}. Since the details that we want to be displayed on on {PaintingCard} will not be avaiable unless we pass the dynamic component props.

    !NOTE - PaintingsList is the name of the key we used to represent our arr

        
    ?- {PaintingCard} 
    At this point {PaintingCard} has access to all the details of the of the paintslist arr and we return those details in a <div> by callig [ props.key]


    !##Deconstructing 
    - Allows us to write and read cleaner code



?Part 2 - React state

information about importing and specifics 7min - 9.30mins

Explanaion on how and why we ued e.target.value, how its passed into {NavBar}, use of setState 40min - 44min

The difference between 
    ?import React, { Component } from 'react';
    ?import React, from 'react';

When to use this.props  49min - 


** Part 3 - React Forms **

- Add a button that will hide / show our form.
- Button should be tied to an event
- We need to figure out a way to keep track of the state of our form, to track whether or not the form is visible or not.( conditional rendering if /else)
- add another state called formView which will respresent whether or not the form is visible or not 
- We set a tenary for the the formView and the painting to hide / show

!toggleForm & prevState Explanaion [4 min - 16min ]
- Execution of this method is based on the current state of formView. 
- We want to change the state *setState* via synthetic event *onClick* passed to a button w/ a handler called toggleForm().
- toggleForm() calls *setState* which makes a copy of a current state as a CB() & returns an updated view where the key: value pair w/ formView as the key and !prevState.formView as the value. Which gives  us he opposite of the current state. 

!Data Flow with addPaintings()
- takes paintings in our arr, from the state and adds a painting

!PaintingForm 18:50min
- we want to find a way to handler changes on a form or check if a form has been touched via onchance or OnBlur
-handleChange() is where we update the state *setState*
- We specify which part of the state we want to target when using spread operator 
- Make a copy of the previous state via the spread operateor, add a 2nd arg as " key: value" pairs that will take [ e.target.name ] as the key and [ e.target.value ] as the value, which refers to each input in our form and listen for users input, respectfully. 

?Client Side Validation
- How handleSubmit, Validation if both the image and title exist we want to updated our painting to be rendered to the paage
- in {App} we want to pass the addPaintings() as props to the form


!Created a second branch with life cycle methods.
